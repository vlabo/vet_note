// Code generated by BobGen sqlite v0.29.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	models "vet_note/db/models"
)

type PatientMod interface {
	Apply(*PatientTemplate)
}

type PatientModFunc func(*PatientTemplate)

func (f PatientModFunc) Apply(n *PatientTemplate) {
	f(n)
}

type PatientModSlice []PatientMod

func (mods PatientModSlice) Apply(n *PatientTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// PatientTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PatientTemplate struct {
	ID         func() int32
	Type       func() null.Val[string]
	Name       func() null.Val[string]
	Gender     func() null.Val[string]
	Age        func() null.Val[decimal.Decimal]
	ChipID     func() null.Val[string]
	Weight     func() null.Val[float32]
	Castrated  func() null.Val[decimal.Decimal]
	Note       func() null.Val[string]
	Owner      func() null.Val[string]
	OwnerPhone func() null.Val[string]
	CreatedAt  func() null.Val[time.Time]
	UpdatedAt  func() null.Val[time.Time]
	DeletedAt  func() null.Val[time.Time]

	r patientR
	f *Factory
}

type patientR struct {
	Procedures []*patientRProceduresR
}

type patientRProceduresR struct {
	number int
	o      *ProcedureTemplate
}

// Apply mods to the PatientTemplate
func (o *PatientTemplate) Apply(mods ...PatientMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Patient
// this does nothing with the relationship templates
func (o PatientTemplate) toModel() *models.Patient {
	m := &models.Patient{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Gender != nil {
		m.Gender = o.Gender()
	}
	if o.Age != nil {
		m.Age = o.Age()
	}
	if o.ChipID != nil {
		m.ChipID = o.ChipID()
	}
	if o.Weight != nil {
		m.Weight = o.Weight()
	}
	if o.Castrated != nil {
		m.Castrated = o.Castrated()
	}
	if o.Note != nil {
		m.Note = o.Note()
	}
	if o.Owner != nil {
		m.Owner = o.Owner()
	}
	if o.OwnerPhone != nil {
		m.OwnerPhone = o.OwnerPhone()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}

	return m
}

// toModels returns an models.PatientSlice
// this does nothing with the relationship templates
func (o PatientTemplate) toModels(number int) models.PatientSlice {
	m := make(models.PatientSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Patient
// according to the relationships in the template. Nothing is inserted into the db
func (t PatientTemplate) setModelRels(o *models.Patient) {
	if t.r.Procedures != nil {
		rel := models.ProcedureSlice{}
		for _, r := range t.r.Procedures {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.PatientID = null.From(o.ID)
				rel.R.Patient = o
			}
			rel = append(rel, related...)
		}
		o.R.Procedures = rel
	}
}

// BuildSetter returns an *models.PatientSetter
// this does nothing with the relationship templates
func (o PatientTemplate) BuildSetter() *models.PatientSetter {
	m := &models.PatientSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Type != nil {
		m.Type = omitnull.FromNull(o.Type())
	}
	if o.Name != nil {
		m.Name = omitnull.FromNull(o.Name())
	}
	if o.Gender != nil {
		m.Gender = omitnull.FromNull(o.Gender())
	}
	if o.Age != nil {
		m.Age = omitnull.FromNull(o.Age())
	}
	if o.ChipID != nil {
		m.ChipID = omitnull.FromNull(o.ChipID())
	}
	if o.Weight != nil {
		m.Weight = omitnull.FromNull(o.Weight())
	}
	if o.Castrated != nil {
		m.Castrated = omitnull.FromNull(o.Castrated())
	}
	if o.Note != nil {
		m.Note = omitnull.FromNull(o.Note())
	}
	if o.Owner != nil {
		m.Owner = omitnull.FromNull(o.Owner())
	}
	if o.OwnerPhone != nil {
		m.OwnerPhone = omitnull.FromNull(o.OwnerPhone())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omitnull.FromNull(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omitnull.FromNull(o.UpdatedAt())
	}
	if o.DeletedAt != nil {
		m.DeletedAt = omitnull.FromNull(o.DeletedAt())
	}

	return m
}

// BuildManySetter returns an []*models.PatientSetter
// this does nothing with the relationship templates
func (o PatientTemplate) BuildManySetter(number int) []*models.PatientSetter {
	m := make([]*models.PatientSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Patient
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PatientTemplate.Create
func (o PatientTemplate) Build() *models.Patient {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PatientSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PatientTemplate.CreateMany
func (o PatientTemplate) BuildMany(number int) models.PatientSlice {
	m := make(models.PatientSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePatient(m *models.PatientSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.Patient
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PatientTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Patient) (context.Context, error) {
	var err error

	if o.r.Procedures != nil {
		for _, r := range o.r.Procedures {
			var rel0 models.ProcedureSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachProcedures(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a patient and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PatientTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Patient, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a patient and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PatientTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Patient {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a patient and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PatientTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Patient {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a patient and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PatientTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Patient, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePatient(opt)

	m, err := models.Patients.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = patientCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple patients and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PatientTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PatientSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple patients and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PatientTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PatientSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple patients and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PatientTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PatientSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple patients and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PatientTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PatientSlice, error) {
	var err error
	m := make(models.PatientSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Patient has methods that act as mods for the PatientTemplate
var PatientMods patientMods

type patientMods struct{}

func (m patientMods) RandomizeAllColumns(f *faker.Faker) PatientMod {
	return PatientModSlice{
		PatientMods.RandomID(f),
		PatientMods.RandomType(f),
		PatientMods.RandomName(f),
		PatientMods.RandomGender(f),
		PatientMods.RandomAge(f),
		PatientMods.RandomChipID(f),
		PatientMods.RandomWeight(f),
		PatientMods.RandomCastrated(f),
		PatientMods.RandomNote(f),
		PatientMods.RandomOwner(f),
		PatientMods.RandomOwnerPhone(f),
		PatientMods.RandomCreatedAt(f),
		PatientMods.RandomUpdatedAt(f),
		PatientMods.RandomDeletedAt(f),
	}
}

// Set the model columns to this value
func (m patientMods) ID(val int32) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m patientMods) IDFunc(f func() int32) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetID() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomID(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m patientMods) Type(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Type = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) TypeFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetType() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomType(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Type = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Name(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) NameFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetName() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomName(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Gender(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Gender = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) GenderFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Gender = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetGender() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Gender = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomGender(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Gender = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Age(val null.Val[decimal.Decimal]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Age = func() null.Val[decimal.Decimal] { return val }
	})
}

// Set the Column from the function
func (m patientMods) AgeFunc(f func() null.Val[decimal.Decimal]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Age = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetAge() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Age = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomAge(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Age = func() null.Val[decimal.Decimal] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[decimal.Decimal](nil)
			}

			return null.From(random_decimal_Decimal(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) ChipID(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ChipID = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) ChipIDFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ChipID = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetChipID() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ChipID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomChipID(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.ChipID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Weight(val null.Val[float32]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Weight = func() null.Val[float32] { return val }
	})
}

// Set the Column from the function
func (m patientMods) WeightFunc(f func() null.Val[float32]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Weight = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetWeight() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Weight = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomWeight(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Weight = func() null.Val[float32] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[float32](nil)
			}

			return null.From(random_float32(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Castrated(val null.Val[decimal.Decimal]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Castrated = func() null.Val[decimal.Decimal] { return val }
	})
}

// Set the Column from the function
func (m patientMods) CastratedFunc(f func() null.Val[decimal.Decimal]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Castrated = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetCastrated() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Castrated = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomCastrated(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Castrated = func() null.Val[decimal.Decimal] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[decimal.Decimal](nil)
			}

			return null.From(random_decimal_Decimal(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Note(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Note = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) NoteFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Note = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetNote() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Note = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomNote(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Note = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) Owner(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Owner = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) OwnerFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Owner = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetOwner() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Owner = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomOwner(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.Owner = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) OwnerPhone(val null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.OwnerPhone = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m patientMods) OwnerPhoneFunc(f func() null.Val[string]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.OwnerPhone = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetOwnerPhone() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.OwnerPhone = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomOwnerPhone(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.OwnerPhone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) CreatedAt(val null.Val[time.Time]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.CreatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m patientMods) CreatedAtFunc(f func() null.Val[time.Time]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetCreatedAt() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomCreatedAt(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) UpdatedAt(val null.Val[time.Time]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m patientMods) UpdatedAtFunc(f func() null.Val[time.Time]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetUpdatedAt() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomUpdatedAt(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m patientMods) DeletedAt(val null.Val[time.Time]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.DeletedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m patientMods) DeletedAtFunc(f func() null.Val[time.Time]) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m patientMods) UnsetDeletedAt() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m patientMods) RandomDeletedAt(f *faker.Faker) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

func (m patientMods) WithProcedures(number int, related *ProcedureTemplate) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.r.Procedures = []*patientRProceduresR{{
			number: number,
			o:      related,
		}}
	})
}

func (m patientMods) WithNewProcedures(number int, mods ...ProcedureMod) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		related := o.f.NewProcedure(mods...)
		m.WithProcedures(number, related).Apply(o)
	})
}

func (m patientMods) AddProcedures(number int, related *ProcedureTemplate) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.r.Procedures = append(o.r.Procedures, &patientRProceduresR{
			number: number,
			o:      related,
		})
	})
}

func (m patientMods) AddNewProcedures(number int, mods ...ProcedureMod) PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		related := o.f.NewProcedure(mods...)
		m.AddProcedures(number, related).Apply(o)
	})
}

func (m patientMods) WithoutProcedures() PatientMod {
	return PatientModFunc(func(o *PatientTemplate) {
		o.r.Procedures = nil
	})
}
