// Code generated by BobGen sqlite v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "vet_note/db/models"
)

type ProcedureMod interface {
	Apply(*ProcedureTemplate)
}

type ProcedureModFunc func(*ProcedureTemplate)

func (f ProcedureModFunc) Apply(n *ProcedureTemplate) {
	f(n)
}

type ProcedureModSlice []ProcedureMod

func (mods ProcedureModSlice) Apply(n *ProcedureTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ProcedureTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ProcedureTemplate struct {
	ID        func() int32
	Type      func() null.Val[string]
	Date      func() null.Val[string]
	Details   func() null.Val[string]
	PatientID func() null.Val[int32]
	CreatedAt func() null.Val[time.Time]
	UpdatedAt func() null.Val[time.Time]
	DeletedAt func() null.Val[time.Time]

	r procedureR
	f *Factory
}

type procedureR struct {
	Patient *procedureRPatientR
}

type procedureRPatientR struct {
	o *PatientTemplate
}

// Apply mods to the ProcedureTemplate
func (o *ProcedureTemplate) Apply(mods ...ProcedureMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Procedure
// this does nothing with the relationship templates
func (o ProcedureTemplate) toModel() *models.Procedure {
	m := &models.Procedure{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Date != nil {
		m.Date = o.Date()
	}
	if o.Details != nil {
		m.Details = o.Details()
	}
	if o.PatientID != nil {
		m.PatientID = o.PatientID()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}

	return m
}

// toModels returns an models.ProcedureSlice
// this does nothing with the relationship templates
func (o ProcedureTemplate) toModels(number int) models.ProcedureSlice {
	m := make(models.ProcedureSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Procedure
// according to the relationships in the template. Nothing is inserted into the db
func (t ProcedureTemplate) setModelRels(o *models.Procedure) {
	if t.r.Patient != nil {
		rel := t.r.Patient.o.toModel()
		rel.R.Procedures = append(rel.R.Procedures, o)
		o.PatientID = null.From(rel.ID)
		o.R.Patient = rel
	}
}

// BuildSetter returns an *models.ProcedureSetter
// this does nothing with the relationship templates
func (o ProcedureTemplate) BuildSetter() *models.ProcedureSetter {
	m := &models.ProcedureSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Type != nil {
		m.Type = omitnull.FromNull(o.Type())
	}
	if o.Date != nil {
		m.Date = omitnull.FromNull(o.Date())
	}
	if o.Details != nil {
		m.Details = omitnull.FromNull(o.Details())
	}
	if o.PatientID != nil {
		m.PatientID = omitnull.FromNull(o.PatientID())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omitnull.FromNull(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omitnull.FromNull(o.UpdatedAt())
	}
	if o.DeletedAt != nil {
		m.DeletedAt = omitnull.FromNull(o.DeletedAt())
	}

	return m
}

// BuildManySetter returns an []*models.ProcedureSetter
// this does nothing with the relationship templates
func (o ProcedureTemplate) BuildManySetter(number int) []*models.ProcedureSetter {
	m := make([]*models.ProcedureSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Procedure
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ProcedureTemplate.Create
func (o ProcedureTemplate) Build() *models.Procedure {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ProcedureSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ProcedureTemplate.CreateMany
func (o ProcedureTemplate) BuildMany(number int) models.ProcedureSlice {
	m := make(models.ProcedureSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableProcedure(m *models.ProcedureSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.Procedure
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ProcedureTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Procedure) (context.Context, error) {
	var err error

	if o.r.Patient != nil {
		var rel0 *models.Patient
		ctx, rel0, err = o.r.Patient.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachPatient(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a procedure and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ProcedureTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Procedure, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a procedure and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ProcedureTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Procedure {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a procedure and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ProcedureTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Procedure {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a procedure and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ProcedureTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Procedure, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableProcedure(opt)

	m, err := models.Procedures.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = procedureCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple procedures and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ProcedureTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ProcedureSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple procedures and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ProcedureTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ProcedureSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple procedures and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ProcedureTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ProcedureSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple procedures and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ProcedureTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ProcedureSlice, error) {
	var err error
	m := make(models.ProcedureSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Procedure has methods that act as mods for the ProcedureTemplate
var ProcedureMods procedureMods

type procedureMods struct{}

func (m procedureMods) RandomizeAllColumns(f *faker.Faker) ProcedureMod {
	return ProcedureModSlice{
		ProcedureMods.RandomID(f),
		ProcedureMods.RandomType(f),
		ProcedureMods.RandomDate(f),
		ProcedureMods.RandomDetails(f),
		ProcedureMods.RandomPatientID(f),
		ProcedureMods.RandomCreatedAt(f),
		ProcedureMods.RandomUpdatedAt(f),
		ProcedureMods.RandomDeletedAt(f),
	}
}

// Set the model columns to this value
func (m procedureMods) ID(val int32) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m procedureMods) IDFunc(f func() int32) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetID() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomID(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m procedureMods) Type(val null.Val[string]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Type = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) TypeFunc(f func() null.Val[string]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetType() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomType(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Type = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m procedureMods) Date(val null.Val[string]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Date = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) DateFunc(f func() null.Val[string]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Date = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetDate() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Date = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomDate(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Date = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m procedureMods) Details(val null.Val[string]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Details = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) DetailsFunc(f func() null.Val[string]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Details = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetDetails() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Details = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomDetails(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.Details = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m procedureMods) PatientID(val null.Val[int32]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.PatientID = func() null.Val[int32] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) PatientIDFunc(f func() null.Val[int32]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.PatientID = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetPatientID() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.PatientID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomPatientID(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.PatientID = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int32](nil)
			}

			return null.From(random_int32(f))
		}
	})
}

// Set the model columns to this value
func (m procedureMods) CreatedAt(val null.Val[time.Time]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.CreatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) CreatedAtFunc(f func() null.Val[time.Time]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetCreatedAt() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomCreatedAt(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m procedureMods) UpdatedAt(val null.Val[time.Time]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) UpdatedAtFunc(f func() null.Val[time.Time]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetUpdatedAt() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomUpdatedAt(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m procedureMods) DeletedAt(val null.Val[time.Time]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.DeletedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m procedureMods) DeletedAtFunc(f func() null.Val[time.Time]) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m procedureMods) UnsetDeletedAt() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m procedureMods) RandomDeletedAt(f *faker.Faker) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

func (m procedureMods) WithPatient(rel *PatientTemplate) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.r.Patient = &procedureRPatientR{
			o: rel,
		}
	})
}

func (m procedureMods) WithNewPatient(mods ...PatientMod) ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		related := o.f.NewPatient(mods...)

		m.WithPatient(related).Apply(o)
	})
}

func (m procedureMods) WithoutPatient() ProcedureMod {
	return ProcedureModFunc(func(o *ProcedureTemplate) {
		o.r.Patient = nil
	})
}
