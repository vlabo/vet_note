// Code generated by BobGen sqlite v0.29.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "vet_note/db/models"
)

type SettingMod interface {
	Apply(*SettingTemplate)
}

type SettingModFunc func(*SettingTemplate)

func (f SettingModFunc) Apply(n *SettingTemplate) {
	f(n)
}

type SettingModSlice []SettingMod

func (mods SettingModSlice) Apply(n *SettingTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// SettingTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SettingTemplate struct {
	ID        func() int32
	Value     func() null.Val[string]
	Type      func() null.Val[string]
	Idx       func() null.Val[int32]
	CreatedAt func() null.Val[time.Time]
	UpdatedAt func() null.Val[time.Time]
	DeletedAt func() null.Val[time.Time]

	f *Factory
}

// Apply mods to the SettingTemplate
func (o *SettingTemplate) Apply(mods ...SettingMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Setting
// this does nothing with the relationship templates
func (o SettingTemplate) toModel() *models.Setting {
	m := &models.Setting{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Value != nil {
		m.Value = o.Value()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Idx != nil {
		m.Idx = o.Idx()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}

	return m
}

// toModels returns an models.SettingSlice
// this does nothing with the relationship templates
func (o SettingTemplate) toModels(number int) models.SettingSlice {
	m := make(models.SettingSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Setting
// according to the relationships in the template. Nothing is inserted into the db
func (t SettingTemplate) setModelRels(o *models.Setting) {}

// BuildSetter returns an *models.SettingSetter
// this does nothing with the relationship templates
func (o SettingTemplate) BuildSetter() *models.SettingSetter {
	m := &models.SettingSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Value != nil {
		m.Value = omitnull.FromNull(o.Value())
	}
	if o.Type != nil {
		m.Type = omitnull.FromNull(o.Type())
	}
	if o.Idx != nil {
		m.Idx = omitnull.FromNull(o.Idx())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omitnull.FromNull(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omitnull.FromNull(o.UpdatedAt())
	}
	if o.DeletedAt != nil {
		m.DeletedAt = omitnull.FromNull(o.DeletedAt())
	}

	return m
}

// BuildManySetter returns an []*models.SettingSetter
// this does nothing with the relationship templates
func (o SettingTemplate) BuildManySetter(number int) []*models.SettingSetter {
	m := make([]*models.SettingSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Setting
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SettingTemplate.Create
func (o SettingTemplate) Build() *models.Setting {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SettingSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SettingTemplate.CreateMany
func (o SettingTemplate) BuildMany(number int) models.SettingSlice {
	m := make(models.SettingSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableSetting(m *models.SettingSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.Setting
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *SettingTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Setting) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a setting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *SettingTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Setting, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a setting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *SettingTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Setting {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a setting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *SettingTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Setting {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a setting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *SettingTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Setting, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableSetting(opt)

	m, err := models.Settings.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = settingCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple settings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o SettingTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.SettingSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple settings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o SettingTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.SettingSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple settings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o SettingTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.SettingSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple settings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o SettingTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.SettingSlice, error) {
	var err error
	m := make(models.SettingSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Setting has methods that act as mods for the SettingTemplate
var SettingMods settingMods

type settingMods struct{}

func (m settingMods) RandomizeAllColumns(f *faker.Faker) SettingMod {
	return SettingModSlice{
		SettingMods.RandomID(f),
		SettingMods.RandomValue(f),
		SettingMods.RandomType(f),
		SettingMods.RandomIdx(f),
		SettingMods.RandomCreatedAt(f),
		SettingMods.RandomUpdatedAt(f),
		SettingMods.RandomDeletedAt(f),
	}
}

// Set the model columns to this value
func (m settingMods) ID(val int32) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m settingMods) IDFunc(f func() int32) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetID() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomID(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m settingMods) Value(val null.Val[string]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Value = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m settingMods) ValueFunc(f func() null.Val[string]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Value = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetValue() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Value = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomValue(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Value = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m settingMods) Type(val null.Val[string]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Type = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m settingMods) TypeFunc(f func() null.Val[string]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetType() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomType(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Type = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m settingMods) Idx(val null.Val[int32]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Idx = func() null.Val[int32] { return val }
	})
}

// Set the Column from the function
func (m settingMods) IdxFunc(f func() null.Val[int32]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Idx = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetIdx() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Idx = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomIdx(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.Idx = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int32](nil)
			}

			return null.From(random_int32(f))
		}
	})
}

// Set the model columns to this value
func (m settingMods) CreatedAt(val null.Val[time.Time]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.CreatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m settingMods) CreatedAtFunc(f func() null.Val[time.Time]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetCreatedAt() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomCreatedAt(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m settingMods) UpdatedAt(val null.Val[time.Time]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m settingMods) UpdatedAtFunc(f func() null.Val[time.Time]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetUpdatedAt() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomUpdatedAt(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m settingMods) DeletedAt(val null.Val[time.Time]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.DeletedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m settingMods) DeletedAtFunc(f func() null.Val[time.Time]) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m settingMods) UnsetDeletedAt() SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m settingMods) RandomDeletedAt(f *faker.Faker) SettingMod {
	return SettingModFunc(func(o *SettingTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}
