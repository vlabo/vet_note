// Code generated by BobGen sqlite v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Procedure is an object representing the database table.
type Procedure struct {
	ID        int32               `db:"id,pk" `
	Type      null.Val[string]    `db:"type" `
	Date      null.Val[string]    `db:"date" `
	Details   null.Val[string]    `db:"details" `
	PatientID null.Val[int32]     `db:"patient_id" `
	CreatedAt null.Val[time.Time] `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `
	DeletedAt null.Val[time.Time] `db:"deleted_at" `

	R procedureR `db:"-" `
}

// ProcedureSlice is an alias for a slice of pointers to Procedure.
// This should almost always be used instead of []*Procedure.
type ProcedureSlice []*Procedure

// Procedures contains methods to work with the procedures table
var Procedures = sqlite.NewTablex[*Procedure, ProcedureSlice, *ProcedureSetter]("", "procedures")

// ProceduresQuery is a query on the procedures table
type ProceduresQuery = *sqlite.ViewQuery[*Procedure, ProcedureSlice]

// procedureR is where relationships are stored.
type procedureR struct {
	Patient *Patient // fk_procedures_0
}

type procedureColumnNames struct {
	ID        string
	Type      string
	Date      string
	Details   string
	PatientID string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}

var ProcedureColumns = buildProcedureColumns("procedures")

type procedureColumns struct {
	tableAlias string
	ID         sqlite.Expression
	Type       sqlite.Expression
	Date       sqlite.Expression
	Details    sqlite.Expression
	PatientID  sqlite.Expression
	CreatedAt  sqlite.Expression
	UpdatedAt  sqlite.Expression
	DeletedAt  sqlite.Expression
}

func (c procedureColumns) Alias() string {
	return c.tableAlias
}

func (procedureColumns) AliasedAs(alias string) procedureColumns {
	return buildProcedureColumns(alias)
}

func buildProcedureColumns(alias string) procedureColumns {
	return procedureColumns{
		tableAlias: alias,
		ID:         sqlite.Quote(alias, "id"),
		Type:       sqlite.Quote(alias, "type"),
		Date:       sqlite.Quote(alias, "date"),
		Details:    sqlite.Quote(alias, "details"),
		PatientID:  sqlite.Quote(alias, "patient_id"),
		CreatedAt:  sqlite.Quote(alias, "created_at"),
		UpdatedAt:  sqlite.Quote(alias, "updated_at"),
		DeletedAt:  sqlite.Quote(alias, "deleted_at"),
	}
}

type procedureWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	Type      sqlite.WhereNullMod[Q, string]
	Date      sqlite.WhereNullMod[Q, string]
	Details   sqlite.WhereNullMod[Q, string]
	PatientID sqlite.WhereNullMod[Q, int32]
	CreatedAt sqlite.WhereNullMod[Q, time.Time]
	UpdatedAt sqlite.WhereNullMod[Q, time.Time]
	DeletedAt sqlite.WhereNullMod[Q, time.Time]
}

func (procedureWhere[Q]) AliasedAs(alias string) procedureWhere[Q] {
	return buildProcedureWhere[Q](buildProcedureColumns(alias))
}

func buildProcedureWhere[Q sqlite.Filterable](cols procedureColumns) procedureWhere[Q] {
	return procedureWhere[Q]{
		ID:        sqlite.Where[Q, int32](cols.ID),
		Type:      sqlite.WhereNull[Q, string](cols.Type),
		Date:      sqlite.WhereNull[Q, string](cols.Date),
		Details:   sqlite.WhereNull[Q, string](cols.Details),
		PatientID: sqlite.WhereNull[Q, int32](cols.PatientID),
		CreatedAt: sqlite.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt: sqlite.WhereNull[Q, time.Time](cols.UpdatedAt),
		DeletedAt: sqlite.WhereNull[Q, time.Time](cols.DeletedAt),
	}
}

var ProcedureErrors = &procedureErrors{
	ErrUniquePkMainProcedures: &UniqueConstraintError{s: "pk_main_procedures"},
}

type procedureErrors struct {
	ErrUniquePkMainProcedures *UniqueConstraintError
}

// ProcedureSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ProcedureSetter struct {
	ID        omit.Val[int32]         `db:"id,pk" `
	Type      omitnull.Val[string]    `db:"type" `
	Date      omitnull.Val[string]    `db:"date" `
	Details   omitnull.Val[string]    `db:"details" `
	PatientID omitnull.Val[int32]     `db:"patient_id" `
	CreatedAt omitnull.Val[time.Time] `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" `
	DeletedAt omitnull.Val[time.Time] `db:"deleted_at" `
}

func (s ProcedureSetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	if !s.Details.IsUnset() {
		vals = append(vals, "details")
	}

	if !s.PatientID.IsUnset() {
		vals = append(vals, "patient_id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	if !s.DeletedAt.IsUnset() {
		vals = append(vals, "deleted_at")
	}

	return vals
}

func (s ProcedureSetter) Overwrite(t *Procedure) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.GetNull()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.GetNull()
	}
	if !s.Details.IsUnset() {
		t.Details, _ = s.Details.GetNull()
	}
	if !s.PatientID.IsUnset() {
		t.PatientID, _ = s.PatientID.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.GetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.GetNull()
	}
	if !s.DeletedAt.IsUnset() {
		t.DeletedAt, _ = s.DeletedAt.GetNull()
	}
}

func (s *ProcedureSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Procedures.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 8)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if !s.Type.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Type))
		}

		if !s.Date.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Date))
		}

		if !s.Details.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Details))
		}

		if !s.PatientID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.PatientID))
		}

		if !s.CreatedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.CreatedAt))
		}

		if !s.UpdatedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.UpdatedAt))
		}

		if !s.DeletedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DeletedAt))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ProcedureSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ProcedureSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 8)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "type")...),
			sqlite.Arg(s.Type),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "date")...),
			sqlite.Arg(s.Date),
		}})
	}

	if !s.Details.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "details")...),
			sqlite.Arg(s.Details),
		}})
	}

	if !s.PatientID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "patient_id")...),
			sqlite.Arg(s.PatientID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	if !s.DeletedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "deleted_at")...),
			sqlite.Arg(s.DeletedAt),
		}})
	}

	return exprs
}

// FindProcedure retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindProcedure(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Procedure, error) {
	if len(cols) == 0 {
		return Procedures.Query(
			SelectWhere.Procedures.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Procedures.Query(
		SelectWhere.Procedures.ID.EQ(IDPK),
		sm.Columns(Procedures.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ProcedureExists checks the presence of a single record by primary key
func ProcedureExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Procedures.Query(
		SelectWhere.Procedures.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Procedure is retrieved from the database
func (o *Procedure) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Procedures.AfterSelectHooks.RunHooks(ctx, exec, ProcedureSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Procedures.AfterInsertHooks.RunHooks(ctx, exec, ProcedureSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Procedures.AfterUpdateHooks.RunHooks(ctx, exec, ProcedureSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Procedures.AfterDeleteHooks.RunHooks(ctx, exec, ProcedureSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Procedure
func (o *Procedure) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Procedure) pkEQ() dialect.Expression {
	return sqlite.Quote("procedures", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Procedure
func (o *Procedure) Update(ctx context.Context, exec bob.Executor, s *ProcedureSetter) error {
	v, err := Procedures.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Procedure record with an executor
func (o *Procedure) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Procedures.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Procedure using the executor
func (o *Procedure) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Procedures.Query(
		SelectWhere.Procedures.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ProcedureSlice is retrieved from the database
func (o ProcedureSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Procedures.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Procedures.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Procedures.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Procedures.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ProcedureSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("procedures", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ProcedureSlice) copyMatchingRows(from ...*Procedure) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ProcedureSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Procedures.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Procedure:
				o.copyMatchingRows(retrieved)
			case []*Procedure:
				o.copyMatchingRows(retrieved...)
			case ProcedureSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Procedure or a slice of Procedure
				// then run the AfterUpdateHooks on the slice
				_, err = Procedures.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ProcedureSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Procedures.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Procedure:
				o.copyMatchingRows(retrieved)
			case []*Procedure:
				o.copyMatchingRows(retrieved...)
			case ProcedureSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Procedure or a slice of Procedure
				// then run the AfterDeleteHooks on the slice
				_, err = Procedures.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ProcedureSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ProcedureSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Procedures.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ProcedureSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Procedures.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ProcedureSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Procedures.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type procedureJoins[Q dialect.Joinable] struct {
	typ     string
	Patient func(context.Context) modAs[Q, patientColumns]
}

func (j procedureJoins[Q]) aliasedAs(alias string) procedureJoins[Q] {
	return buildProcedureJoins[Q](buildProcedureColumns(alias), j.typ)
}

func buildProcedureJoins[Q dialect.Joinable](cols procedureColumns, typ string) procedureJoins[Q] {
	return procedureJoins[Q]{
		typ:     typ,
		Patient: proceduresJoinPatient[Q](cols, typ),
	}
}

func proceduresJoinPatient[Q dialect.Joinable](from procedureColumns, typ string) func(context.Context) modAs[Q, patientColumns] {
	return func(ctx context.Context) modAs[Q, patientColumns] {
		return modAs[Q, patientColumns]{
			c: PatientColumns,
			f: func(to patientColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Patients.Name().As(to.Alias())).On(
						to.ID.EQ(from.PatientID),
					))
				}

				return mods
			},
		}
	}
}

// Patient starts a query for related objects on patients
func (o *Procedure) Patient(mods ...bob.Mod[*dialect.SelectQuery]) PatientsQuery {
	return Patients.Query(append(mods,
		sm.Where(PatientColumns.ID.EQ(sqlite.Arg(o.PatientID))),
	)...)
}

func (os ProcedureSlice) Patient(mods ...bob.Mod[*dialect.SelectQuery]) PatientsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.PatientID)
	}

	return Patients.Query(append(mods,
		sm.Where(sqlite.Group(PatientColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Procedure) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Patient":
		rel, ok := retrieved.(*Patient)
		if !ok {
			return fmt.Errorf("procedure cannot load %T as %q", retrieved, name)
		}

		o.R.Patient = rel

		if rel != nil {
			rel.R.Procedures = ProcedureSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("procedure has no relationship %q", name)
	}
}

func PreloadProcedurePatient(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Patient, PatientSlice](orm.Relationship{
		Name: "Patient",
		Sides: []orm.RelSide{
			{
				From: TableNames.Procedures,
				To:   TableNames.Patients,
				FromColumns: []string{
					ColumnNames.Procedures.PatientID,
				},
				ToColumns: []string{
					ColumnNames.Patients.ID,
				},
			},
		},
	}, Patients.Columns().Names(), opts...)
}

func ThenLoadProcedurePatient(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadProcedurePatient(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ProcedurePatient", retrieved)
		}

		err := loader.LoadProcedurePatient(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadProcedurePatient loads the procedure's Patient into the .R struct
func (o *Procedure) LoadProcedurePatient(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Patient = nil

	related, err := o.Patient(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Procedures = ProcedureSlice{o}

	o.R.Patient = related
	return nil
}

// LoadProcedurePatient loads the procedure's Patient into the .R struct
func (os ProcedureSlice) LoadProcedurePatient(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	patients, err := os.Patient(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range patients {
			if o.PatientID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.Procedures = append(rel.R.Procedures, o)

			o.R.Patient = rel
			break
		}
	}

	return nil
}

func attachProcedurePatient0(ctx context.Context, exec bob.Executor, count int, procedure0 *Procedure, patient1 *Patient) (*Procedure, error) {
	setter := &ProcedureSetter{
		PatientID: omitnull.From(patient1.ID),
	}

	err := procedure0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachProcedurePatient0: %w", err)
	}

	return procedure0, nil
}

func (procedure0 *Procedure) InsertPatient(ctx context.Context, exec bob.Executor, related *PatientSetter) error {
	patient1, err := Patients.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachProcedurePatient0(ctx, exec, 1, procedure0, patient1)
	if err != nil {
		return err
	}

	procedure0.R.Patient = patient1

	patient1.R.Procedures = append(patient1.R.Procedures, procedure0)

	return nil
}

func (procedure0 *Procedure) AttachPatient(ctx context.Context, exec bob.Executor, patient1 *Patient) error {
	var err error

	_, err = attachProcedurePatient0(ctx, exec, 1, procedure0, patient1)
	if err != nil {
		return err
	}

	procedure0.R.Patient = patient1

	patient1.R.Procedures = append(patient1.R.Procedures, procedure0)

	return nil
}
