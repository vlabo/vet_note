// Code generated by BobGen sqlite v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
)

// Setting is an object representing the database table.
type Setting struct {
	ID        int32               `db:"id,pk" `
	Value     null.Val[string]    `db:"value" `
	Type      null.Val[string]    `db:"type" `
	Idx       null.Val[int32]     `db:"idx" `
	CreatedAt null.Val[time.Time] `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `
	DeletedAt null.Val[time.Time] `db:"deleted_at" `
}

// SettingSlice is an alias for a slice of pointers to Setting.
// This should almost always be used instead of []*Setting.
type SettingSlice []*Setting

// Settings contains methods to work with the settings table
var Settings = sqlite.NewTablex[*Setting, SettingSlice, *SettingSetter]("", "settings")

// SettingsQuery is a query on the settings table
type SettingsQuery = *sqlite.ViewQuery[*Setting, SettingSlice]

type settingColumnNames struct {
	ID        string
	Value     string
	Type      string
	Idx       string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}

var SettingColumns = buildSettingColumns("settings")

type settingColumns struct {
	tableAlias string
	ID         sqlite.Expression
	Value      sqlite.Expression
	Type       sqlite.Expression
	Idx        sqlite.Expression
	CreatedAt  sqlite.Expression
	UpdatedAt  sqlite.Expression
	DeletedAt  sqlite.Expression
}

func (c settingColumns) Alias() string {
	return c.tableAlias
}

func (settingColumns) AliasedAs(alias string) settingColumns {
	return buildSettingColumns(alias)
}

func buildSettingColumns(alias string) settingColumns {
	return settingColumns{
		tableAlias: alias,
		ID:         sqlite.Quote(alias, "id"),
		Value:      sqlite.Quote(alias, "value"),
		Type:       sqlite.Quote(alias, "type"),
		Idx:        sqlite.Quote(alias, "idx"),
		CreatedAt:  sqlite.Quote(alias, "created_at"),
		UpdatedAt:  sqlite.Quote(alias, "updated_at"),
		DeletedAt:  sqlite.Quote(alias, "deleted_at"),
	}
}

type settingWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	Value     sqlite.WhereNullMod[Q, string]
	Type      sqlite.WhereNullMod[Q, string]
	Idx       sqlite.WhereNullMod[Q, int32]
	CreatedAt sqlite.WhereNullMod[Q, time.Time]
	UpdatedAt sqlite.WhereNullMod[Q, time.Time]
	DeletedAt sqlite.WhereNullMod[Q, time.Time]
}

func (settingWhere[Q]) AliasedAs(alias string) settingWhere[Q] {
	return buildSettingWhere[Q](buildSettingColumns(alias))
}

func buildSettingWhere[Q sqlite.Filterable](cols settingColumns) settingWhere[Q] {
	return settingWhere[Q]{
		ID:        sqlite.Where[Q, int32](cols.ID),
		Value:     sqlite.WhereNull[Q, string](cols.Value),
		Type:      sqlite.WhereNull[Q, string](cols.Type),
		Idx:       sqlite.WhereNull[Q, int32](cols.Idx),
		CreatedAt: sqlite.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt: sqlite.WhereNull[Q, time.Time](cols.UpdatedAt),
		DeletedAt: sqlite.WhereNull[Q, time.Time](cols.DeletedAt),
	}
}

var SettingErrors = &settingErrors{
	ErrUniquePkMainSettings: &UniqueConstraintError{s: "pk_main_settings"},
}

type settingErrors struct {
	ErrUniquePkMainSettings *UniqueConstraintError
}

// SettingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SettingSetter struct {
	ID        omit.Val[int32]         `db:"id,pk" `
	Value     omitnull.Val[string]    `db:"value" `
	Type      omitnull.Val[string]    `db:"type" `
	Idx       omitnull.Val[int32]     `db:"idx" `
	CreatedAt omitnull.Val[time.Time] `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" `
	DeletedAt omitnull.Val[time.Time] `db:"deleted_at" `
}

func (s SettingSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Value.IsUnset() {
		vals = append(vals, "value")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Idx.IsUnset() {
		vals = append(vals, "idx")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	if !s.DeletedAt.IsUnset() {
		vals = append(vals, "deleted_at")
	}

	return vals
}

func (s SettingSetter) Overwrite(t *Setting) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Value.IsUnset() {
		t.Value, _ = s.Value.GetNull()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.GetNull()
	}
	if !s.Idx.IsUnset() {
		t.Idx, _ = s.Idx.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.GetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.GetNull()
	}
	if !s.DeletedAt.IsUnset() {
		t.DeletedAt, _ = s.DeletedAt.GetNull()
	}
}

func (s *SettingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Settings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 7)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if !s.Value.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Value))
		}

		if !s.Type.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Type))
		}

		if !s.Idx.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Idx))
		}

		if !s.CreatedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.CreatedAt))
		}

		if !s.UpdatedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.UpdatedAt))
		}

		if !s.DeletedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DeletedAt))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SettingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SettingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Value.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "value")...),
			sqlite.Arg(s.Value),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "type")...),
			sqlite.Arg(s.Type),
		}})
	}

	if !s.Idx.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "idx")...),
			sqlite.Arg(s.Idx),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	if !s.DeletedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "deleted_at")...),
			sqlite.Arg(s.DeletedAt),
		}})
	}

	return exprs
}

// FindSetting retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSetting(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Setting, error) {
	if len(cols) == 0 {
		return Settings.Query(
			SelectWhere.Settings.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Settings.Query(
		SelectWhere.Settings.ID.EQ(IDPK),
		sm.Columns(Settings.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SettingExists checks the presence of a single record by primary key
func SettingExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Settings.Query(
		SelectWhere.Settings.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Setting is retrieved from the database
func (o *Setting) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Settings.AfterSelectHooks.RunHooks(ctx, exec, SettingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Settings.AfterInsertHooks.RunHooks(ctx, exec, SettingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Settings.AfterUpdateHooks.RunHooks(ctx, exec, SettingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Settings.AfterDeleteHooks.RunHooks(ctx, exec, SettingSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Setting
func (o *Setting) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Setting) pkEQ() dialect.Expression {
	return sqlite.Quote("settings", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Setting
func (o *Setting) Update(ctx context.Context, exec bob.Executor, s *SettingSetter) error {
	v, err := Settings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single Setting record with an executor
func (o *Setting) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Settings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Setting using the executor
func (o *Setting) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Settings.Query(
		SelectWhere.Settings.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after SettingSlice is retrieved from the database
func (o SettingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Settings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Settings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Settings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Settings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SettingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("settings", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SettingSlice) copyMatchingRows(from ...*Setting) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SettingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Settings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Setting:
				o.copyMatchingRows(retrieved)
			case []*Setting:
				o.copyMatchingRows(retrieved...)
			case SettingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Setting or a slice of Setting
				// then run the AfterUpdateHooks on the slice
				_, err = Settings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SettingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Settings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Setting:
				o.copyMatchingRows(retrieved)
			case []*Setting:
				o.copyMatchingRows(retrieved...)
			case SettingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Setting or a slice of Setting
				// then run the AfterDeleteHooks on the slice
				_, err = Settings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SettingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SettingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Settings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SettingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Settings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SettingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Settings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
